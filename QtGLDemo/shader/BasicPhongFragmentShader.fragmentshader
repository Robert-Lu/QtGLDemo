#version 330 core

in vec3 objectColor;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 lightDirFrom;
uniform vec3 viewPos;
uniform float alpha;

struct Material {
    float ambient;
    float diffuse;
    float specular;
    float shininess;
};

uniform Material material;

out vec4 color;

void main()
{
    vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
    float ambientStrength = material.ambient;
    float diffuseStrength = material.diffuse;
    float specularStrength = material.specular;

    vec3 ambient = ambientStrength * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightDirFrom);
    //float diff = max(dot(norm, lightDir), 0.0);
    float diff = max(dot(norm, lightDir), -0.75*dot(norm, lightDir));
    vec3 diffuse = diff * lightColor * diffuseStrength;

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = specularStrength * spec * lightColor;

    vec3 result = (ambient + diffuse) * objectColor + specular;
    color = vec4(result, alpha);
}